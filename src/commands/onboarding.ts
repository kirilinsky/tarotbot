import { bot } from "../bot";
import { supabase } from "../supabase";

const GENDERS: Record<string, string> = {
  –ú—É–∂—Å–∫–æ–π: "male",
  –ñ–µ–Ω—Å–∫–∏–π: "female",
};

bot.hears(Object.keys(GENDERS), async (ctx) => {
  const gender = GENDERS[ctx.message.text];
  const telegramId = ctx.from.id.toString();

  await supabase.from("users").update({ gender }).eq("telegram_id", telegramId);

  await ctx.reply(`–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É:`, {
    reply_markup: {
      keyboard: [
        [{ text: "–¥–æ 18" }, { text: "18‚Äì25" }],
        [{ text: "26‚Äì35" }, { text: "36‚Äì45" }],
        [{ text: "46‚Äì60" }, { text: "60+" }],
      ],
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  });
});

// üéÇ –í–æ–∑—Ä–∞—Å—Ç
const AGE_GROUPS: Record<string, string> = {
  "–¥–æ 18": "under_18",
  "18‚Äì25": "18_25",
  "26‚Äì35": "26_35",
  "36‚Äì45": "36_45",
  "46‚Äì60": "46_60",
  "60+": "60_plus",
};

bot.hears(Object.keys(AGE_GROUPS), async (ctx) => {
  const ageGroup = AGE_GROUPS[ctx.message.text];
  const telegramId = ctx.from.id.toString();

  await supabase
    .from("users")
    .update({ age_group: ageGroup })
    .eq("telegram_id", telegramId);

  await ctx.reply(`–ß—Ç–æ –¥–ª—è —Ç–µ–±—è —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ?`, {
    reply_markup: {
      keyboard: [
        [{ text: "–õ—é–±–æ–≤—å" }, { text: "–†–∞–±–æ—Ç–∞" }],
        [{ text: "–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ" }, { text: "–§–∏–Ω–∞–Ω—Å—ã" }],
        [{ text: "–°–µ–º—å—è" }, { text: "–ó–¥–æ—Ä–æ–≤—å–µ" }],
        [{ text: "–î—Ä—É–≥–æ–µ" }],
      ],
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  });
});

const FOCUS_AREAS: Record<string, string> = {
  –õ—é–±–æ–≤—å: "love",
  –†–∞–±–æ—Ç–∞: "career",
  –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ: "self",
  –§–∏–Ω–∞–Ω—Å—ã: "money",
  –°–µ–º—å—è: "family",
  –ó–¥–æ—Ä–æ–≤—å–µ: "health",
  –î—Ä—É–≥–æ–µ: "other",
};

bot.hears(Object.keys(FOCUS_AREAS), async (ctx) => {
  const focusArea = FOCUS_AREAS[ctx.message.text];
  const telegramId = ctx.from.id.toString();

  await supabase
    .from("users")
    .update({ focus_area: focusArea })
    .eq("telegram_id", telegramId);

  await ctx.reply("–ö–∞–∫ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è —Å–µ–π—á–∞—Å, –≤ –∫–∞–∫–æ–º —Ç—ã —ç—Ç–∞–ø–µ –∂–∏–∑–Ω–∏?", {
    reply_markup: {
      keyboard: [
        [{ text: "–í –ø–æ–∏—Å–∫–µ —Å–µ–±—è" }, { text: "–ü–µ—Ä–µ–∂–∏–≤–∞—é —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏" }],
        [{ text: "–í—Å—ë —Å—Ç–∞–±–∏–ª—å–Ω–æ" }, { text: "–ì–æ—Ç–æ–≤(–∞) –∫ –ø–µ—Ä–µ–º–µ–Ω–∞–º" }],
        [{ text: "–í–ª—é–±–ª—ë–Ω(–∞)" }],
        [{ text: "–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å" }],
      ],
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  });
});

const LIFE_PHASES: Record<string, string> = {
  "–í –ø–æ–∏—Å–∫–µ —Å–µ–±—è": "searching",
  "–ü–µ—Ä–µ–∂–∏–≤–∞—é —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏": "crisis",
  "–í—Å—ë —Å—Ç–∞–±–∏–ª—å–Ω–æ": "stable",
  "–ì–æ—Ç–æ–≤(–∞) –∫ –ø–µ—Ä–µ–º–µ–Ω–∞–º": "transition",
  "–í–ª—é–±–ª—ë–Ω(–∞)": "in_love",
  –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å: "uncertain",
};

bot.hears(Object.keys(LIFE_PHASES), async (ctx) => {
  const lifePhase = LIFE_PHASES[ctx.message.text];
  const telegramId = ctx.from.id.toString();

  await supabase
    .from("users")
    .update({ life_phase: lifePhase })
    .eq("telegram_id", telegramId);

  await ctx.reply(
    "–°–ø–∞—Å–∏–±–æ! –¢—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω(–∞). –ù–∞–ø–∏—à–∏ /daily, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è üÉè",
    {
      reply_markup: { remove_keyboard: true },
    }
  );
});
