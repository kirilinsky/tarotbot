import { bot } from "../bot";
import { supabase } from "../supabase";

const GENDERS: Record<string, string> = {
  –ú—É–∂—Å–∫–æ–π: "male",
  –ñ–µ–Ω—Å–∫–∏–π: "female",
  –î—Ä—É–≥–æ–π: "other",
};

bot.hears(Object.keys(GENDERS), async (ctx) => {
  const gender = GENDERS[ctx.message.text];
  const telegramId = ctx.from.id.toString();

  await supabase.from("users").update({ gender }).eq("telegram_id", telegramId);

  await ctx.reply(`–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É:`, {
    reply_markup: {
      keyboard: [
        [{ text: "–¥–æ 18" }, { text: "18‚Äì25" }],
        [{ text: "26‚Äì35" }, { text: "36‚Äì45" }],
        [{ text: "46‚Äì60" }, { text: "60+" }],
      ],
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  });
});

const AGE_GROUPS: Record<string, string> = {
  "–¥–æ 18": "under_18",
  "18‚Äì25": "18_25",
  "26‚Äì35": "26_35",
  "36‚Äì45": "36_45",
  "46‚Äì60": "46_60",
  "60+": "60_plus",
};

bot.hears(Object.keys(AGE_GROUPS), async (ctx) => {
  const ageGroup = AGE_GROUPS[ctx.message.text];
  const telegramId = ctx.from.id.toString();

  await supabase
    .from("users")
    .update({ age_group: ageGroup })
    .eq("telegram_id", telegramId);

  await ctx.reply(`–°–ø–∞—Å–∏–±–æ! –¢—ã –≥–æ—Ç–æ–≤ –∫ —Å–≤–æ–µ–º—É –ø–µ—Ä–≤–æ–º—É —Ä–∞—Å–∫–ª–∞–¥—É üÉè`, {
    reply_markup: { remove_keyboard: true },
  });
});
